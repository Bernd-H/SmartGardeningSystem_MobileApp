<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MobileApp.Common</name>
    </assembly>
    <members>
        <member name="M:TinyIoC.TypeExtensions.GetGenericMethod(System.Type,System.Reflection.BindingFlags,System.String,System.Type[],System.Type[])">
            <summary>
            Gets a generic method from a type given the method name, binding flags, generic types and parameter types
            </summary>
            <param name="sourceType">Source type</param>
            <param name="bindingFlags">Binding flags</param>
            <param name="methodName">Name of the method</param>
            <param name="genericTypes">Generic types to use to make the method generic</param>
            <param name="parameterTypes">Method parameters</param>
            <returns>MethodInfo or null if no matches found</returns>
            <exception cref="T:System.Reflection.AmbiguousMatchException"/>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="T:TinyIoC.NamedParameterOverloads">
            <summary>
            Name/Value pairs for specifying "user" parameters when resolving
            </summary>
        </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.AttemptResolve">
            <summary>
            Attempt to resolve type, even if the type isn't registered.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.Fail">
            <summary>
            Fail resolution if type not explicitly registered
            </summary>
        </member>
        <member name="F:TinyIoC.UnregisteredResolutionActions.GenericsOnly">
            <summary>
            Attempt to resolve unregistered type if requested type is generic
            and no registration exists for the specific generic parameters used.
            
            Registered types/options will always take precedence.
            </summary>
        </member>
        <member name="T:TinyIoC.ResolveOptions">
            <summary>
            Resolution settings
            </summary>
        </member>
        <member name="P:TinyIoC.ResolveOptions.Default">
            <summary>
            Gets the default options (attempt resolution of unregistered types, fail on named resolution if name not found)
            </summary>
        </member>
        <member name="P:TinyIoC.ResolveOptions.FailNameNotFoundOnly">
            <summary>
            Preconfigured option for attempting resolution of unregistered types and failing on named resolution if name not found
            </summary>
        </member>
        <member name="P:TinyIoC.ResolveOptions.FailUnregisteredAndNameNotFound">
            <summary>
            Preconfigured option for failing on resolving unregistered types and on named resolution if name not found
            </summary>
        </member>
        <member name="P:TinyIoC.ResolveOptions.FailUnregisteredOnly">
            <summary>
            Preconfigured option for failing on resolving unregistered types, but attempting unnamed resolution if name not found
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.RegisterOptions">
            <summary>
            Registration options for "fluent" API
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.WithWeakReference">
            <summary>
            Make registration hold a weak reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.WithStrongReference">
            <summary>
            Make registration hold a strong reference if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterOptions.ToCustomLifetimeManager(TinyIoC.TinyIoCContainer.RegisterOptions,TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">RegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>RegisterOptions</returns>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.MultiRegisterOptions">
            <summary>
            Registration options for "fluent" API when registering multiple implementations
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.#ctor(System.Collections.Generic.IEnumerable{TinyIoC.TinyIoCContainer.RegisterOptions})">
            <summary>
            Initializes a new instance of the MultiRegisterOptions class.
            </summary>
            <param name="registerOptions">Registration options</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.AsSingleton">
            <summary>
            Make registration a singleton (single instance) if possible
            </summary>
            <returns>RegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.AsMultiInstance">
            <summary>
            Make registration multi-instance if possible
            </summary>
            <returns>MultiRegisterOptions</returns>
            <exception cref="T:TinyIoC.TinyIoCRegistrationException"></exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.MultiRegisterOptions.ToCustomLifetimeManager(TinyIoC.TinyIoCContainer.MultiRegisterOptions,TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider,System.String)">
            <summary>
            Switches to a custom lifetime manager factory if possible.
            
            Usually used for RegisterOptions "To*" extension methods such as the ASP.Net per-request one.
            </summary>
            <param name="instance">MultiRegisterOptions instance</param>
            <param name="lifetimeProvider">Custom lifetime manager</param>
            <param name="errorString">Error string to display if switch fails</param>
            <returns>MultiRegisterOptions</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(TinyIoC.DuplicateImplementationActions)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(TinyIoC.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the current app domain.
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            
            If more than one class implements an interface then only one implementation will be registered
            although no error will be thrown.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},TinyIoC.DuplicateImplementationActions)">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.AutoRegister(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},TinyIoC.DuplicateImplementationActions,System.Func{System.Type,System.Boolean})">
            <summary>
            Attempt to automatically register all non-generic classes and interfaces in the specified assemblies
            Types will only be registered if they pass the supplied registration predicate.
            </summary>
            <param name="assemblies">Assemblies to process</param>
            <param name="duplicateAction">What action to take when encountering duplicate implementations of an interface/base class.</param>
            <param name="registrationPredicate">Predicate to determine if a particular type should be registered</param>
            <exception cref="T:TinyIoC.TinyIoCAutoRegistrationException"/>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type)">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type)">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type to instantiate that implements RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.Object)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Type,System.Object,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <param name="registerType">Type to register</param>
            <param name="registerImplementation">Type of instance to register that implements RegisterType</param>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,System.Object})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register(System.Type,System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,System.Object},System.String)">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <param name="registerType">Type to register</param>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1">
            <summary>
            Creates/replaces a container class registration with default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.String)">
            <summary>
            Creates/replaces a named container class registration with default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2">
            <summary>
            Creates/replaces a container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(System.String)">
            <summary>
            Creates/replaces a named container class registration with a given implementation and default options.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type to instantiate that implements RegisterType</typeparam>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(``0)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(``0,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="instance">Instance of RegisterType to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(``1)">
            <summary>
            Creates/replaces a container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``2(``1,System.String)">
            <summary>
            Creates/replaces a named container class registration with a specific, strong referenced, instance.
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <typeparam name="RegisterImplementation">Type of instance to register that implements RegisterType</typeparam>
            <param name="instance">Instance of RegisterImplementation to register</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,``0})">
            <summary>
            Creates/replaces a container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Register``1(System.Func{TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,``0},System.String)">
            <summary>
            Creates/replaces a named container class registration with a user specified factory
            </summary>
            <typeparam name="RegisterType">Type to register</typeparam>
            <param name="factory">Factory/lambda that returns an instance of RegisterType</param>
            <param name="name">Name of registration</param>
            <returns>RegisterOptions for fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterMultiple``1(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <typeparam name="RegisterType">Type that each implementation implements</typeparam>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.RegisterMultiple(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Register multiple implementations of a type.
            
            Internally this registers each implementation using the full name of the class as its registration name.
            </summary>
            <param name="registrationType">Type that each implementation implements</param>
            <param name="implementationTypes">Types that implement RegisterType</param>
            <returns>MultiRegisterOptions for the fluent API</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Unregister``1">
            <summary>
            Remove a container class registration.
            </summary>
            <typeparam name="RegisterType">Type to unregister</typeparam>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Unregister``1(System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <typeparam name="RegisterType">Type to unregister</typeparam>
            <param name="name">Name of registration</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Unregister(System.Type)">
            <summary>
            Remove a container class registration.
            </summary>
            <param name="registerType">Type to unregister</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Unregister(System.Type,System.String)">
            <summary>
            Remove a named container class registration.
            </summary>
            <param name="registerType">Type to unregister</param>
            <param name="name">Name of registration</param>
            <returns>true if the registration is successfully found and removed; otherwise, false.</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type)">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <returns>Instance of type</returns>
            <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1">
            <summary>
            Attempts to resolve a type using default options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <returns>Instance of type</returns>
            <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.ResolveOptions)">
            <summary>
            Attempts to resolve a type using specified options.
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <returns>Instance of type</returns>
            <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String)">
             <summary>
             Attempts to resolve a type using default options and the supplied name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using supplied options and  name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to resolve a type using default options and the supplied constructor parameters and name.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User specified constructor parameters</param>
             <param name="name">Name of registration</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.Resolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to resolve a named type using specified options and the supplied constructor parameters.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User specified constructor parameters</param>
             <param name="options">Resolution options</param>
             <returns>Instance of type</returns>
             <exception cref="T:TinyIoC.TinyIoCResolutionException">Unable to resolve the type.</exception>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type)">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <param name="resolveType">Type to resolve</param>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1">
             <summary>
             Attempts to predict whether a given type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String)">
             <summary>
             Attempts to predict whether a given named type can be resolved with default options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the specified options.
            
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.NamedParameterOverloads)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters and default options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.CanResolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
             <summary>
             Attempts to predict whether a given named type can be resolved with the supplied constructor parameters options.
            
             Parameters are used in conjunction with normal container resolution to find the most suitable constructor (if one exists).
             All user supplied parameters must exist in at least one resolvable constructor of RegisterType or resolution will fail.
             
             Note: Resolution may still fail if user defined factory registrations fail to construct objects when called.
             </summary>
             <typeparam name="ResolveType">Type to resolve</typeparam>
             <param name="name">Name of registration</param>
             <param name="parameters">User supplied named parameter overloads</param>
             <param name="options">Resolution options</param>
             <returns>Bool indicating whether the type can be resolved</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.ResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the given options
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and given name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.ResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the given options and name
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.NamedParameterOverloads,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and supplied constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,System.Object@)">
            <summary>
            Attempts to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the supplied options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve(System.Type,System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,System.Object@)">
            <summary>
            Attempts to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <param name="resolveType">Type to resolve</param>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(``0@)">
            <summary>
            Attempts to resolve a type using the default options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.ResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the given options
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,``0@)">
            <summary>
            Attempts to resolve a type using the default options and given name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.ResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the given options and name
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.NamedParameterOverloads,``0@)">
            <summary>
            Attempts to resolve a type using the default options and supplied constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.NamedParameterOverloads,``0@)">
            <summary>
            Attempts to resolve a type using the default options and supplied name and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the supplied options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.TryResolve``1(System.String,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions,``0@)">
            <summary>
            Attempts to resolve a type using the supplied name, options and constructor parameters
            </summary>
            <typeparam name="ResolveType">Type to resolve</typeparam>
            <param name="name">Name of registration</param>
            <param name="parameters">User specified constructor parameters</param>
            <param name="options">Resolution options</param>
            <param name="resolvedType">Resolved type or default if resolve fails</param>
            <returns>True if resolved successfully, false otherwise</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll(System.Type,System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <param name="resolveType">Type to resolveAll</param>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll(System.Type)">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <param name="resolveType">Type to resolveAll</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll``1(System.Boolean)">
            <summary>
            Returns all registrations of a type
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <param name="includeUnnamed">Whether to include un-named (default) registrations</param>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ResolveAll``1">
            <summary>
            Returns all registrations of a type, both named and unnamed
            </summary>
            <typeparam name="ResolveType">Type to resolveAll</typeparam>
            <returns>IEnumerable</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.BuildUp(System.Object)">
            <summary>
            Attempts to resolve all public property dependencies on the given object.
            </summary>
            <param name="input">Object to "build up"</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.BuildUp(System.Object,TinyIoC.ResolveOptions)">
            <summary>
            Attempts to resolve all public property dependencies on the given object using the given resolve options.
            </summary>
            <param name="input">Object to "build up"</param>
            <param name="resolveOptions">Resolve options to use</param>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider">
            <summary>
            Provides custom lifetime management for ASP.Net per-request lifetimes etc.
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.GetObject">
            <summary>
            Gets the stored object if it exists, or null if not
            </summary>
            <returns>Object instance or null</returns>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.SetObject(System.Object)">
            <summary>
            Store the object
            </summary>
            <param name="value">Object to store</param>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ITinyIoCObjectLifetimeProvider.ReleaseObject">
            <summary>
            Release the object
            </summary>
        </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.AssumeConstruction">
            <summary>
            Whether to assume this factory successfully constructs its objects
            
            Generally set to true for delegate style factories as CanResolve cannot delve
            into the delegates they contain.
            </summary>
        </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.CreatesType">
            <summary>
            The type the factory instantiates
            </summary>
        </member>
        <member name="P:TinyIoC.TinyIoCContainer.ObjectFactoryBase.Constructor">
            <summary>
            Constructor to use, if specified
            </summary>
        </member>
        <member name="M:TinyIoC.TinyIoCContainer.ObjectFactoryBase.GetObject(System.Type,TinyIoC.TinyIoCContainer,TinyIoC.NamedParameterOverloads,TinyIoC.ResolveOptions)">
            <summary>
            Create the type
            </summary>
            <param name="requestedType">Type user requested to be resolved</param>
            <param name="container">Container that requested the creation</param>
            <param name="parameters">Any user parameters passed</param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.MultiInstanceFactory">
            <summary>
            IObjectFactory that creates new instances of types for each resolution
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.DelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.WeakDelegateFactory">
            <summary>
            IObjectFactory that invokes a specified delegate to construct the object
            Holds the delegate using a weak reference
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.InstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.WeakInstanceFactory">
            <summary>
            Stores an particular instance to return for a type
            
            Stores the instance with a weak reference
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.SingletonFactory">
            <summary>
            A factory that lazy instantiates a type and always returns the same instance
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.DelegateSingletonFactory">
            <summary>
            A factory that lazy instantiates a type using a factory method and after construction
            always returns the same instance
            </summary>
        </member>
        <member name="T:TinyIoC.TinyIoCContainer.CustomObjectLifetimeFactory">
            <summary>
            A factory that offloads lifetime to an external lifetime provider
            </summary>
        </member>
        <member name="P:TinyIoC.TinyIoCContainer.Current">
            <summary>
            Lazy created Singleton instance of the container for simple scenarios
            </summary>
        </member>
        <member name="F:MobileApp.Common.Configuration.ConfigurationStore.ConfigFileName">
            <summary>
            This file is in the Assets folder in MobileApp.Android
            </summary>
        </member>
        <member name="F:MobileApp.Common.Configuration.ConfigurationStore.ConfigurationContent">
            <summary>
            Gets set by MobileApp.Android and MobileApp.iOS when the app gets started.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Configuration.ConfigurationStore.SetConfigToStandardValues">
            <summary>
            Used when loading the configuration file failed.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ApplicationSettingsDto.AesKey">
            <summary>
            Exchanged to the mobile app securley. Used to decrypt
            the authentication information (in RestAPI) sent by the mobile app.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ApplicationSettingsDto.AesIV">
            <summary>
            Exchanged to the mobile app securley. Used to decrypt
            the authentication information (in RestAPI) sent by the mobile app.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ApplicationSettingsDto.BasestationCert">
            <summary>
            Certificate of the basestation
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ModuleInfoDto.InformationTimestamp">
            <summary>
            Time when the information got requested from the server
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ModuleInfoDto.SignalStrength">
            <summary>
            Last measured signal strength to the module.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ModuleInfoDto.TemperatureMeasurements">
            <summary>
            List of temperature measurements of the module.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ModuleInfoDto.AssociatedModules">
            <summary>
            Property for valves.
            Sensors that are associated to this valve.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ModuleInfoDto.LastWaterings">
            <summary>
            Property for valves.
            List of irrigation DateTimes with the time the valve was open in minutes.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ModuleInfoDto.EnabledForManualIrrigation">
            <summary>
            Property for valves.
            True to open or close this valve when the system gets controlled manually.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.DTOs.ModuleInfoDto.SoilMoistureMeasurements">
            <summary>
            Property for sensors.
            List of soil moisture measurements.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ApplicationSettings.AesKey">
            <summary>
            Exchanged to the mobile app securley. Used to decrypt
            packages from the CommandManager or relay packages received from the basestation over the external server.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ApplicationSettings.AesIV">
            <summary>
            Exchanged to the mobile app securley. Used to decrypt
            packages from the CommandManager or relay packages received from the basestation over the external server.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ApplicationSettings.BasestationCert">
            <summary>
            Certificate of the basestation
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.Configuration.ConnectionSettings.CommandsListener_Port">
            <summary>
            Port on which the command service is listening on the basestation
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ModuleInfo.InformationTimestamp">
            <summary>
            Time when the information got requested from the server
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ModuleInfo.SignalStrength">
            <summary>
            Last measured signal strength to the module.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ModuleInfo.TemperatureMeasurements">
            <summary>
            List of temperature measurements of the module.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ModuleInfo.AssociatedModules">
            <summary>
            Property for valves.
            Sensors that are associated to this valve.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ModuleInfo.LastWaterings">
            <summary>
            Property for valves.
            List of irrigation DateTimes with the time the valve was open in minutes.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ModuleInfo.EnabledForManualIrrigation">
            <summary>
            Property for valves.
            True to open or close this valve when the system gets controlled manually.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Models.Entities.ModuleInfo.SoilMoistureMeasurements">
            <summary>
            Property for sensors.
            List of soil moisture measurements.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Specifications.Configuration.IConnectionSettings.CommandsListener_Port">
            <summary>
            Port on which the command service is listening on the basestation
            </summary>
        </member>
        <member name="T:MobileApp.Common.Specifications.Cryptography.IAesEncrypterDecrypter">
            <summary>
            Class to encrypt and decrypt byte arrays with RijndaelManaged.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Cryptography.IAesEncrypterDecrypter.Encrypt(System.String)">
            <summary>
            Encrypts a string with the Aes key, stored in the application settings.
            </summary>
            <param name="data">Data to encrypt.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Cryptography.IAesEncrypterDecrypter.Encrypt(System.Byte[])">
            <summary>
            Encrypts a byte array with the Aes key, stored in the application settings.
            </summary>
            <param name="data">Data to encrypt.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Cryptography.IAesEncrypterDecrypter.Decrypt(System.Byte[])">
            <summary>
            Decrypts a byte array with the Aes key, stored in the application settings.
            </summary>
            <param name="data">Data to decrypt.</param>
            <returns>Decrypted data.</returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.Cryptography.IAesTunnelInSslStream">
            <summary>
            Class that manages receive and send methods and adds a aes encryption layer.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Cryptography.IAesTunnelInSslStream.Init(System.Net.Security.SslStream)">
            <summary>
            Initializes the class.
            </summary>
            <param name="sslStream">Stream to send data and to receive form.</param>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataAccess.Communication.IAesTcpClient">
            <summary>
            Tcp client that sends all packages aes encrypted and decryptes all received ones.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.IAesTcpClient.Start(System.Net.IPEndPoint,System.Int32)">
            <summary>
            Builds the tcp connection to the <paramref name="remoteEndPoint"/>.
            </summary>
            <param name="remoteEndPoint">IP end point of the server to connect to.</param>
            <param name="receiveTimeout">Sets the amount of time a System.Net.Sockets.TcpClient will wait to receive data once a read operation is initiated.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult
            parameter contains a boolean that is true when a connection got establilshed successfully.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.IAesTcpClient.Stop">
            <summary>
            Disconnects the tcp client form the server.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.IAesTcpClient.IsConnected">
            <summary>
            Gets a value indicating whether the underlying System.Net.Sockets.Socket for a System.Net.Sockets.TcpClient is connected to a remote host.
            </summary>
            <returns>True if the System.Net.Sockets.TcpClient.Client socket was connected to a remote resource as of the most recent operation; otherwise, false.</returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataAccess.Communication.IApiRequestsRelayServer">
            <summary>
            Server that relays api requests threw an encrypted tunnel and that relays the answer back.
            This server is only locally accessable.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.IApiRequestsRelayServer.Start(MobileApp.Common.Specifications.DataAccess.Communication.IEncryptedTunnel,System.Threading.CancellationToken)">
            <summary>
            Starts a local server that listens on the same port as the basestation API.
            </summary>
            <param name="relayTunnel">Tunnel to relay the received packages to.</param>
            <param name="cancellationToken">System.Threading.CancellationToken to stop the realy server.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the server got started successfully.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataAccess.Communication.ICommandsRelayServer">
            <summary>
            Server that relays requests that are made for the command-server of the basestation threw an encrypted tunnel and that relays the answer back.
            This server is only locally accessable.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.ICommandsRelayServer.Start(MobileApp.Common.Specifications.DataAccess.Communication.IEncryptedTunnel,System.Threading.CancellationToken)">
            <summary>
            Starts the local server that listens on the same port as the basestation command service.
            </summary>
            <param name="relayTunnel">Tunnel to relay the received packages to.</param>
            <param name="cancellationToken">System.Threading.CancellationToken to stop the realy server.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the server got started successfully.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataAccess.Communication.IEncryptedTunnel">
            <summary>
            Interface that defines send and receive methods 
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.IEncryptedTunnel.ReceiveData(System.Threading.CancellationToken)">
            <summary>
            Reads data from an encrypted stream.
            </summary>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult
            parameter contains the received decrypted data.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.IEncryptedTunnel.SendData(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Writes data encrypted to a stream.
            </summary>
            <param name="data">Data to send (plaintext).</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>
            A task that represents the asynchronous write operation.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.IEncryptedTunnel.SendAndReceiveData(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Calls first SendData() and then ReceiveData().
            For multithreading (locking) purposes.
            </summary>
            <param name="data">Data to send.</param>
            <param name="cancellationToken">The token to monitor for cancellation requests. The default value is System.Threading.CancellationToken.None.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult
            parameter contains the received decrypted data.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataAccess.Communication.ILocalBasestationDiscovery">
            <summary>
            Class that commissions the multicast UDP packages and handles the answer of a basestation.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.ILocalBasestationDiscovery.TryFindBasestation">
            <summary>
            Tries to find a basestation in the local area through sending a multicast message.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a BasestationFoundDto object containing the Id and remote end point of the basestation.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataAccess.Communication.IMulticastUdpSender">
            <summary>
            Class to build and send the multicast basestation search message.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.IMulticastUdpSender.SendToMulticastGroupAsync(System.Net.IPAddress,System.Int32)">
            <summary>
            Builds the basestation search message and sends it to all internet interfaces.
            </summary>
            <param name="localIP">The private ip address of this device.</param>
            <param name="replyPort">Port the basestation should send the answer to.</param>
            <returns>A Task that represents an asynchronous operation.</returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataAccess.Communication.ISslTcpClient">
            <summary>
            A Tcp client that sends and receives all packages over a Ssl stream.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Specifications.DataAccess.Communication.ISslTcpClient.SslStream">
            <summary>
            Gets the Ssl stream. Null when the client isn't connected to the server.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.ISslTcpClient.Start(System.Net.IPEndPoint,System.Boolean,System.String)">
            <summary>
            Builds the tcp connection to the <paramref name="endPoint"/>.
            </summary>
            <param name="endPoint">IP end point of the server to connect to.</param>
            <param name="selfSignedCertificate">True to ignore the server certificate.</param>
            <param name="targetHost">The name of the server that shares this System.Net.Security.SslStream.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult
            parameter contains a boolean that is true when everything went good.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.ISslTcpClient.GetServerCert">
            <summary>
            Gets the certificate of the server.
            </summary>
            <returns>A X509Certificate object. Null when the client isn't connected to the server.</returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.Communication.ISslTcpClient.Stop">
            <summary>
            Disconnects the tcp client form the server and closes the ssl stream.
            </summary>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataAccess.IFileStorage">
            <summary>
            Class to write and read from a file.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.IFileStorage.ReadAsString(System.String)">
            <summary>
            Reads a hole file.
            </summary>
            <param name="filePath">Filepath of the file to read.</param>
            <returns>
            A task that represents the asynchronous read operation. The value of the TResult
            parameter contains the text of the file.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.DataAccess.IFileStorage.WriteAllText(System.String,System.String)">
            <summary>
            Writes a string to a file.
            Overrides an existing file.
            </summary>
            <param name="filePath">Filepath of the file.</param>
            <param name="text">Text to write to the file.</param>
            <returns>A task that represents the asynchronous write operation.</returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataObjects.IServiceDetails">
            <summary>
            Used in WanPackages, when the user accesses this server via peer to peer or via the external server.
            </summary>
        </member>
        <member name="P:MobileApp.Common.Specifications.DataObjects.IServiceDetails.HoldConnectionOpen">
            <summary>
            True, to hold the connection from the LocalRelayManager in the Project GardeningSystem to the specified Service (ServiceType, Port) in Gardeningsystem open
            </summary>
        </member>
        <member name="T:MobileApp.Common.Specifications.DataObjects.IServicePackage">
            <summary>
            Contains information of what currently active connection should be used in LocalRelayManager in the project "GardeningSystem" to forward data.
            </summary>
        </member>
        <member name="T:MobileApp.Common.Specifications.ILoggerService">
            <summary>
            Class to get an NLog logger for a specific class.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.ILoggerService.GetLogger``1">
            <summary>
            Gets a NLog logger instance.
            </summary>
            <typeparam name="T">Type of the class the logger is for.</typeparam>
            <returns>Logger for class with type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.ILoggerService.GetLogFilePath(System.Boolean)">
            <summary>
            Gets the path of the log file.
            </summary>
            <param name="allLogsFile">True to get the path of the log file where all logs get stored in (including TRACE logs).</param>
            <returns>Full filepath.</returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.ILoggerService.AddEventHandler(System.EventHandler)">
            <summary>
            Adds a new eventhandler.
            The <paramref name="eventHandler"/> will get invoked when a new entry gets written to the log file.
            </summary>
            <param name="eventHandler">Eventhandler to add.</param>
        </member>
        <member name="M:MobileApp.Common.Specifications.ILoggerService.RemoveEventHandler(System.EventHandler)">
            <summary>
            Removes an existing eventhandler.
            </summary>
            <param name="eventHandler">Eventhandler to remove.</param>
            <returns>True if the event handler got removed successfully.</returns>
        </member>
        <member name="P:MobileApp.Common.Specifications.IValvesListViewModel.LinkedValves">
            <summary>
            List of valves which gets displayed in an view model
            </summary>
        </member>
        <member name="T:MobileApp.Common.Specifications.Managers.IAesKeyExchangeManager">
            <summary>
            Class to get a aes key from a basestation.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAesKeyExchangeManager.Start(System.Threading.CancellationToken)">
            <summary>
            Connects to the basestation and receives the aes key through a secure connection.
            </summary>
            <param name="token">System.Threading.CancellationToken to stop the process.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the key got retrieved successfully.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.Managers.IAPIManager">
            <summary>
            Class that handles API requests to the basestation.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.Login(System.String,System.String,System.Byte[])">
            <summary>
            Performs a login and stores a Json Web Token (JwT) in the SettingsManager. 
            This token will be used by all following api requests/posts.
            Checks if the stored aes key is valid.
            </summary>
            <param name="username">Username.</param>
            <param name="password">Plaintext password.</param>
            <param name="keyValidationBytes">
            Aes encrypted byte array that contains a specific code and a salt.
            Will get decrypted by the basestation and checked if the decrypted data makes sense.
            </param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when login was successfully.
            </returns>
            <exception cref="T:MobileApp.Common.Exceptions.WrongAesKeyException">Gets thrown when the basestation could not decrypt the keyValidationBytes.</exception>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.ChangeLoginInfo(MobileApp.Common.Models.DTOs.UpdateUserDto)">
            <summary>
            Changes the login information.
            </summary>
            <param name="updateUserDto">An object containing the current login information and the new login information.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the username and password got changed successfully.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.Logout">
            <summary>
            Clears stored session information.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.GetModules">
            <summary>
            Requests all modules which are connected with the basestation.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a list of all modules and is null when an error occured.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException">Gets thrown when token is not valid.</exception>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.UpdateModule(MobileApp.Common.Models.Entities.ModuleInfo)">
            <summary>
            Updates a specific module.
            </summary>
            <param name="updatedModule">The updated module.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
            <remarks>The ModuleId of the <paramref name="updatedModule"/> cannot be changed.</remarks>
            <exception cref="T:System.UnauthorizedAccessException">Gets thrown when token is not valid.</exception>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.AddModule(MobileApp.Common.Models.Entities.ModuleInfo)">
            <summary>
            This method was just for test purposes and doesn't get supported by the basestation anymore.
            </summary>
            <param name="newModule">The module to add.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException">Gets thrown when token is not valid.</exception>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.DeleteModule(System.Byte)">
            <summary>
            Deletes/Disconnects a module from the system.
            </summary>
            <param name="moduleId">Id of the module to remove.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException">Gets thrown when token is not valid.</exception>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.IsBasestationConnectedToWlan">
            <summary>
            Asks the basestation if it is connected to a wlan.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean that is true when the basestation is connected to a wifi.
            </returns>
            <exception cref="T:System.UnauthorizedAccessException">Gets thrown when token is not valid.</exception>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.GetWlans">
            <summary>
            Requests the ssids of all wifis which the basestation can reach.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a list with all available wifis.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IAPIManager.GetSystemStatus">
            <summary>
            Requests the system status of the basestation.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a MobileApp.Common.Models.Entities.SystemStatus object.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.Managers.IBasestationFinderManager">
            <summary>
            Class to locate a basestation in the local network.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IBasestationFinderManager.FindLocalBaseStation">
            <summary>
            Trys to find a basestation via a multicast ip address.
            Retries a view times if no basestation answered.
            Stores the ip address of a found basestation in settings.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when a basestation got found.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.Managers.ICommandManager">
            <summary>
            Class to send commands to the basestation.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ICommandManager.ConnectToWlan(MobileApp.Common.Models.DTOs.WlanInfoDto)">
            <summary>
            Trys to connect the basestation to another wifi.
            </summary>
            <param name="wlanInfo">Wlan-login-data.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ICommandManager.DisconnectFromWlan">
            <summary>
            Disconnects the basestation from a wifi.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ICommandManager.StartAutomaticIrrigation">
            <summary>
            Enables the automatic irrigation algorithm of the basestation that get's activated automatically to specific times.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ICommandManager.StopAutomaticIrrigation">
            <summary>
            Disables the automatic irrigation algorithm.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ICommandManager.StartManualIrrigation(System.TimeSpan)">
            <summary>
            Opens all valves which are enabled for manual irrigation immediately.
            </summary>
            <param name="timeSpan">Time the valves should stay open. The maximum timespan a valve can stay open is 8,5 hours.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ICommandManager.StopManualIrrigation">
            <summary>
            Closes all valves that are enabled for manual irrigation.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ICommandManager.DiscoverNewModule(System.Threading.CancellationToken)">
            <summary>
            Searches for a new module to connect to the system.
            This process can take some time.
            </summary>
            <param name="cancellationToken">System.Threading.CancellationToken to abort the search.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains the Id of the new module if a new module got connected successfully and is null if no new module was found.
            </returns>
            <remarks>More information about this new module can be requested through the APIManager.</remarks>
            <seealso cref="T:MobileApp.Common.Specifications.Managers.IAPIManager"/>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ICommandManager.Test">
            <summary>
            Tests if the command manager service is available.
            (For debug reasons)
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains if the command services is available or not.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.Managers.IRelayManager">
            <summary>
            Class to establish a connection to the basestation over the internet and to start local services that relay all traffic through that connection.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.IRelayManager.ConnectToTheBasestation(System.Threading.CancellationToken,System.Boolean,System.Boolean)">
            <summary>
            Tells the external server that we want to establish a connection to a specific basestation.
            Changes the endpoints of all clients to a local relay server, if the connection with the basestation was successful.
            </summary>
            <param name="cancellationToken">To close all open connections and stop relaying api requests or commands.</param>
            <param name="forceRelay">True, to redirect all traffic over the external server and not directly to the basestation.</param>
            <param name="test">True when the the connection is only for a relay test.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean that is true when a connection to the basestation got esablished.
            </returns>
            <remarks>
            Trys to establish a connection directly to the basestation.
            If that isn't possible a secure end-to-end encrypted tunnel will get opend over the external server to the basestation.
            </remarks>
        </member>
        <member name="T:MobileApp.Common.Specifications.Managers.ISettingsManager">
            <summary>
            Class that manages the application settings.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ISettingsManager.GetApplicationSettings">
            <summary>
            Gets the application settings.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a MobileApp.Common.Models.DTOs.ApplicationSettingsDto object.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ISettingsManager.UpdateCurrentSettings(System.Func{MobileApp.Common.Models.DTOs.ApplicationSettingsDto,MobileApp.Common.Models.DTOs.ApplicationSettingsDto})">
            <summary>
            Ensures that the current settings get passed to the <paramref name="updateFunc"/> function.
            This method is thread safe.
            </summary>
            <param name="updateFunc">Function that takes the current settings and returns the updated settings.</param>
            <returns>A task that represents an asynchronous operation.</returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ISettingsManager.GetRuntimeVariables">
            <summary>
            Gets the global runtime settings.
            </summary>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains a MobileApp.Common.Models.Entities.GlobalRuntimeVariables object.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Managers.ISettingsManager.UpdateCurrentRuntimeVariables(System.Func{MobileApp.Common.Models.Entities.GlobalRuntimeVariables,MobileApp.Common.Models.Entities.GlobalRuntimeVariables})">
            <summary>
            Updates the global runtime settings.
            Ensures that the current settings get passed to the <paramref name="updateFunc"/> function.
            </summary>
            <param name="updateFunc">Function that takes the current global runtime settings and that returns the updated settings.</param>
        </member>
        <member name="T:MobileApp.Common.Specifications.Services.ICachePageDataService">
            <summary>
            Class to cache objects associated with a Guid.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.ICachePageDataService.Store(System.Guid,System.Object)">
            <summary>
            Stores an object and it's id in memory.
            </summary>
            <param name="storageId">Id of the object.</param>
            <param name="o">The object to store.</param>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.ICachePageDataService.RemoveFromStore(System.Guid)">
            <summary>
            Returns and removes an object form storage.
            </summary>
            <param name="storageId">Id of the object.</param>
            <returns>Returns the object that was associated to the given <paramref name="storageId"/>.</returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.ICachePageDataService.UpdateCachedPageData(System.Guid,System.Func{System.Object,System.Object})">
            <summary>
            Updates a already stored object.
            </summary>
            <param name="storageId">Id of the object that should get updated.</param>
            <param name="updateFunc">Takes the current object stored at <paramref>storageId</paramref> and returns the updated object.</param>
            <exception cref="T:System.ArgumentException">When there is no object stored at the passed <paramref>storageId</paramref>.</exception>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.ICachePageDataService.GetFromStore(System.Guid)">
            <summary>
            Gets an object without removing it.
            </summary>
            <param name="storageId">Id of the object.</param>
            <returns>An object that is associated with the given <paramref name="storageId"/>.</returns>
            <exception cref="T:System.ArgumentException">When there is no object stored at the passed <paramref>storageId</paramref>.</exception>
        </member>
        <member name="T:MobileApp.Common.Specifications.Services.ICloseApplicationService">
            <summary>
            Class to close the app.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.ICloseApplicationService.CloseApplication">
            <summary>
            Closes the app.
            </summary>
        </member>
        <member name="T:MobileApp.Common.Specifications.Services.IDataStore`1">
            <summary>
            Class to administrate objects. (repository)
            </summary>
            <typeparam name="T">Type of the objects that this class stores.</typeparam>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.IDataStore`1.AddItemAsync(`0)">
            <summary>
            Adds an item to the repository.
            </summary>
            <param name="item">Item to add.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.IDataStore`1.UpdateItemAsync(`0)">
            <summary>
            Updates an existing item.
            </summary>
            <param name="item">Updated item.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.IDataStore`1.DeleteItemAsync``1(``0)">
            <summary>
            Removes an existing item from the repository.
            </summary>
            <typeparam name="T1">Type of the Id of the item.</typeparam>
            <param name="id">Id of the item that should get removed.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter is a boolean indicating wether the operation was a success or not.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.IDataStore`1.GetItemAsync``1(``0)">
            <summary>
            Gets an item with a specific <paramref name="id"/> from the repository.
            </summary>
            <typeparam name="T1">Type of the Id of the item.</typeparam>
            <param name="id">Id of the item.</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains the item.
            </returns>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.IDataStore`1.GetItemsAsync(System.Boolean)">
            <summary>
            Gets all items from the repository.
            </summary>
            <param name="forceRefresh">True to load all items from their source and not from the cache. (Updates the internal cache)</param>
            <returns>
            A task that represents an asynchronous operation. The value of the TResult
            parameter contains all items of the repository.
            </returns>
        </member>
        <member name="T:MobileApp.Common.Specifications.Services.IDialogService">
            <summary>
            Class to show messages to the user.
            </summary>
        </member>
        <member name="M:MobileApp.Common.Specifications.Services.IDialogService.ShowMessage(System.String,System.String,System.String,System.Action)">
            <summary>
            Displays a dialog to the user.
            </summary>
            <param name="message">Message.</param>
            <param name="title">Title.</param>
            <param name="buttonText">The text of the button. (for example: "Close")</param>
            <param name="afterHideCallback">Method that gets called after the user pressed the button with the text=<paramref name="buttonText"/>.</param>
            <returns>A Task that reprecents an asynchronous operation.</returns>
        </member>
        <member name="M:MobileApp.Common.Utilities.IpUtils.IPEndPoint_TryParse(System.String)">
            <summary>
            Handles IPv4 and IPv6 notation.
            </summary>
            <param name="endPoint"></param>
            <returns>Null when parsing failed.</returns>
        </member>
    </members>
</doc>
